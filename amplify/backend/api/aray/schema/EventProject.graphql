type EventProject
  @model
  @key(name: "byEventIdByStatus",
    fields: ["eventId","status"], queryField: "getEventProjectsByEventIdByStatus")
  @key(name: "byProjectId", fields: ["projectId", "status"], queryField: "getEventProjectsByProjectId")
  @key(name: "byCreatedBy", fields: ["createdBy", "status"], queryField: "getEventProjectsByCreatedBy")
  @auth(rules: [
    { allow: public, operations: [read] },
    # update through custom resovler (need to update the event.attendanceCount)
    { allow: groups, groups: ["Users"], operations: [read] },
    { allow: groups, groups: ["Admins"] },
  ])
{
  id: ID!
  eventId: ID!
  projectId: ID!
  status: EventProjectStatus!
  title: String
  description: String
  event: Event! @connection(fields: ["eventId"])
  project: Project! @connection(fields: ["projectId"])
  user: User! @connection(fields: ["createdBy"])
  links: [EventProjectLink]
  createdAt: AWSDateTime!
  createdBy: String!
  updatedAt: AWSDateTime!
  updatedBy: String!
}

enum EventProjectStatus {
  pending
  confirmed
}

type EventProjectLink {
  name: String!
  description: String
  url: String!
}